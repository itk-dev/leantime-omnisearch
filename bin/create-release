#!/usr/bin/env bash
set -o errexit -o errtrace -o noclobber -o nounset -o pipefail
IFS=$'\n\t'

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
project_dir=$(cd "$(dirname "$script_dir")" && pwd)

tag=${1:-}
if [ -z "$tag" ]; then
  (>&2 echo "Usage: $0 tag")
  exit
fi

cd "$project_dir"

plugin_name=OmniSearch

# Edit release-exclude.txt to exclude files and folder from release package.

# Configuration end

git config --global --add safe.directory "$PWD"
if ! git diff --exit-code composer.json; then
  (>&2 echo; echo composer.json is changed. Aborting.)
  exit 1
fi


name="leantime-plugin-${plugin_name}-${tag}.tar.gz"

git config --global --add safe.directory "$PWD"
if ! git diff --exit-code package.json; then
  (>&2 echo; echo package.json is changed. Aborting.)
  exit 1
fi

# Build release start
npm install --no-dev
npm run build
# Build release end
# Make sure that `package.json` has the correct version.
npm config set version "${tag}"

# Package release
release_dir=release
target_dir="$release_dir/$plugin_name"
mkdir -p "$target_dir"

rsync --verbose --archive --compress --filter=':- .gitignore' --exclude-from "$script_dir/release-exclude.txt" . "$target_dir"

# Replace %%VERSION%% with actual version in build
find $target_dir -type f -print0 | xargs -0 sed -i "s/%%VERSION%%/${tag}/g"

# Strip any leading `dev-` from tag name in package name.
name="${plugin_name}-${tag#dev-}.tar.gz"
tar --create --file "$name" -C "$release_dir" $plugin_name
sha256sum "$name" >| checksum.txt

# Clean up
rm -fr $release_dir

git checkout composer.json

echo
echo "Release content ($name)"
echo
tar tvf "$name" | grep -v '/$'
echo
